1.回调函数：
  array中的forEach函数：
      array.forEach(callback(currentValue,index,array){
           //do,something
      },this)
      array.forEach(callback[,thisArg])
      callback该函数会被依次传入三个参数：
          currentValue(当前值) 数组中正在处理的当前元素。
          index(索引) 数组中正在处理的当前元素的索引。
          array forEach()方法正在操作的数组。 
      已删除的项 空项 不会被访问到，会被自动跳过
      返回值：undefined
      Map的回调函数参数依次为：value,key,map：
          如果对某些参数不感兴趣，可以忽略
          如：a.forEach(function(element))          
2.参数检查：
    typeof x!== 'number';          
3.函数：
    arguments:
       它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array
       利用arguments，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值
       实际上arguments最常用于判断传入参数的个数
    rest:
       rest参数只能写在最后，前面用...标识 example:
              function foo(a, b, ...rest) {
                 console.log('a = ' + a);
                 console.log('b = ' + b);
                 console.log(rest);
                 }
              返回值为一个数组
    函数可嵌套：
        内部函数可访问外部函数定义的变量，反之则不行
        这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。
        我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：
             function foo(){
                var
                   x=1
                    .
                    .
                    .
             }
    全局作用域
        JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性
    名字空间
        全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。

        减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中
            // 唯一的全局变量MYAPP:
            var MYAPP = {};
            // 其他变量:
            MYAPP.name = 'myapp';
            MYAPP.version = 1.0;
            // 其他函数:
            MYAPP.foo = function () {
                return 'foo';
            };
    局部作用域:
        由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：
                for(var i=0;i<100;i++){
                    //
                }
                    i+=100;//仍然可以引用变量i 
            let: 用let替代var可以申明一个块级作用域的变量
                'use strict';
                function foo() {
                var sum = 0;
                for (let i=0; i<100; i++) {
                     sum += i;
                     }
                // SyntaxError:
                i += 1;
                }            
    解构赋值:
        JavaScript引入了解构赋值，可以同时对一组变量进行赋值
        // 如果浏览器支持解构赋值就不会报错:
        var [x, y, z] = ['hello', 'JavaScript', 'ES6']; 
        对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的
        
        解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题
    方法：
        解构函数还可以使用默认值
        在一个对象中绑定函数，即为该对象的方法
                var xiaoming = {
                name: '小明',
                birth: 1990,
                age: function () {
                var y = new Date().getFullYear();
                return y - this.birth;
            }
        };  
    this:
        JavaScript的函数内部如果调用了this,则这个this的指向视情况而定
        要保证this指向正确，必须用obj.xxx()的形式调用！
        
        原因是this指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了
        
        因此：我们用一个that变量首先捕获this
            'use strict';
            var xiaoming = {
            name: '小明',
            birth: 1990,
            age: function () {
            var that = this; // 在方法内部一开始就捕获this
            function getAgeFromBirth() {
            var y = new Date().getFullYear();
            return y - that.birth; // 用that而不是this
            }
            return getAgeFromBirth();
           }
        };
        xiaoming.age(); // 25
    apply:
        函数本身的apply方法，接收两个参数。
        第一个为需要绑定的this变量，第二个参数是array(apply把参数打包成Array再传入)
            function getAge() {
            var y = new Date().getFullYear();
            return y - this.birth;
            }
            
            var xiaoming = {
            name: '小明',
            birth: 1990,
            age: getAge
            };
            xiaoming.age(); // 25
            getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空
    高阶函数：
        JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
    map/reduce:
        array.map()传入的参数是function，作用在array上
        目的是对array中的每一个元素都使用一遍function
        返回值为：array
        array.reduce(f(x,y),a): a为计算的初始值
        Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算
        joint("")：
            var arr = new Array(3)
            arr[0] = "George"
            arr[1] = "John"
            arr[2] = "Thomas"

            document.write(arr.join("."))
            输出：
                George.John.Thomas
    filter:
        filter也是一个常用的操作，它用于把Array的某些元素过滤掉，然后返回剩下的元素。
        和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素
        
        trim()去除字符串两边的空白
    回调函数：
        filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身
        
        利用filter，可以巧妙地去除Array的重复元素
            去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。
    sort():排序算法
        对于两个元素x和y，如果认为x < y，则返回-1，如果认为x == y，则返回0，如果认为x > y，则返回1，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序
        自己写回调函数
            要按数字大小排序，我们可以这么写：
            'use strict';
            var arr = [10, 20, 1, 2];
 
            arr.sort(function (x, y) {
                if (x < y) {
                return -1;
                }
                if (x > y) {
                return 1;
                }
                return 0;
                });
                console.log(arr); // [1, 2, 10, 20]
高阶函数：
    闭包： 
        在函数lazy_sum中定义了函数sum，并且，内部函数sum可以引用外部函数
        lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量
        都保存在返回的函数中。
        function lazy_sum(arr) {
           var sum = function () {
               return arr.reduce(function (x, y) {
                   return x + y;
                });
            }
            return sum;
        }
        当我们调用lazy_sum时，每次调用都会返回一个新的函数，即使传入相同的参数
        返回的函数在其定义内部引用了局部变量arr，所以，当一个函数 返回了一个函数后，其内部的局部变量还被新函数引用
        需要牢记的一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量
        
        创建一个匿名函数并立刻执行
        (function (x){return x*x}(3));
        
        借助闭包：
            封装一个私有变量。
                'use strict';
                function create_counter(initial){
                    var x = initial || 0;
                    return {
                        inc:function(){
                            x += 1;
                            return x;                            
                        }
                    }
                }
        利用闭包建一个实现x^2,x^3的函数
                'use strict';
                function make_pow(n){
                    return function(x){
                        return Math.pow(x,n);    
                    }
                }
                
                var pow2 = make_pow(2);
                var pow3 = make_pow(3);
                
                console.log(pow2(5));//25
                console.log(pow3(7));//343
    箭头函数：(Arrow Function)
        x => x*x === function(x){return x*x;}
        (x,y,...rest) => {
                  var i,sum = x + y;
                  for(i=0;i<rest.length;i++){
                        sum += rest[i]; 
                  }
                  return sum;                   
              } 
        修复this指向问题：
            var obj = {
                birth:1990,
                getAge:function(){
                   var b = this.birth;
                   var fn = ()=> new Date().getFullYear()-this.birth;
                   return fn();
                }
            };
            obj.getAge();
generator:生成器

标准对象：
    typeof 123;//'number'
    几条需要遵守的规则：
        不要使用new Number()、new Boolean()、new String()创建包装对象；
        用parseInt()或parseFloat()来转换任意类型到number
        用String()来转换任意类型到string，或者直接调用某个对象的toString()方法         
        通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}
        typeof操作符可以判断出number、boolean、string、function和undefined
        判断Array要使用Array.isArray(arr)
        判断null请使用myVar === null
        判断某个全局变量是否存在用typeof window.myVar === 'undefined'
        函数内部判断某个变量是否存在用typeof myVar === 'undefined'
        
JSON：JavaScript Object Notation
    输入json： 
        var s = JSON.stringify(xiaoming)
    输出json：
        JSON.stringify(xiaoming,['name','skills'],' ');
        第二个参数用于控制如何筛选对象的键值，若只想输出指定的属性，可以传入Array
        还可以传入一个函数：
            function convert(key,value){
                 if(typeof value === 'string'){
                      return value.toUpperCase();
                 }
                return value;
            }
            JSON.stringify(xiaoming,convert,' ');
    序列化：toJSON():定义在原json数据中
    反序列化：JSON.parse() 将json变成一个JavaScript对象
面向对象编程：
    通过prototype来实现面向对象编程
        var Student = {
                name: 'Robot',
                height: 1.2,
                run: function () {
                   console.log(this.name + ' is running...');
                }
        };
        var xiaoming = {
            name: '小明'
        };
        //把小明的原型指向了对象Student
        xiaoming.__proto__ = Student;
    创建实例：
        Object.create()传入一个原型对象，并且创建一个基于该原型的新对象
        例：
            // 原型对象:
            var Student = {
                name: 'Robot',
                height: 1.2,
                run: function () {
                    console.log(this.name + ' is running...');
                }
            };
            function createStudent(name) {
                // 基于Student原型创建一个新对象：
                var s = Object.create(Student);
                // 初始化新对象:
                s.name = name;
                return s;
            }
            var xiaoming = createStudent('小明');
            xiaoming.run(); // 小明 is running...
            xiaoming.__proto__ === Student; // true
    构造函数：
        function Student(name){
            this.name = name;
            this.hello = function(){
                 console.log('Hello, '+this.name+'!');
            }
        }    
        
                
 